1) avem o lista de locatii ||||||0-3->centre medicale, 4-depo, 5-20 posibile locatii ale pacientilor-> asta pentru primul json din seria de teste
	 de masini
	 de pacienti
mai avem si matrice  de distante intre locatii 
avem o lista de Activitati
		-fiecare Activitate are asociata un pacient si un tip Forward(): pacientul(p) de la p.start_location trebuie transportat la p.destination(centrul medical)
							Backward() pacientul(p) de la p.destination trebuie transportat la p.end_location
		Ce ne intereseaza de fapt:la Activitatile forward masina sa ajunga inainte de p.rdvTime-maxWaitTime
						backward-masina sa ajunga cand  p.rdvTime+p.rdvDuration si sa transporte pacientul inainte de   p.rdvTime+p.rdvDuration+maxwaitTime la p.end_location
2)Sortam lista de Activitati | Presupunem ca avem ceva de  genul {F1,F2,F3,B1,F4,F5,B6}
2.1)Fiecare masina o asignam unui obiect monitor care o sa monitrizeze:poz_curenta_a_masinii, timpul_curent, car_load-ul, si o sa aiba si lista_de_pacienti( acei pacienti care sunt\vor fi in masina), se va modifica atunci cand va cobora un pacient
3 Pentru fiecare masina asignam o prima activitate din lista. Momentam pp ca avem 2 masini
 	Deci m1.patients_list pun F1 
		in monitorul pentru masina ser vor updata toate campuril precizate la 2.1
	        m2.patient_list pun F2
		analog
4)Merg in continuare prin lista si  verific daca mai pot lua alt pacient cu una dintre masini
	4.1)Determin masina cea mai apropiata de pacientul din F3
			4.1.1)Gasesc masina atunci pentru pacientii din masina calculez o lista remain_times->remain_times[0] semnifica cat timp mai are masina ca sa-l duca pe pacientul din m.lista_pacienti[0] la destinatie
			4.1.2)Calculez: remain_times[0]-dist(m.pozCurenta, pozPacientuluidinF3)-dist(pozPacientuluidinF3, destinatia_lui_lista_pacienti[0])
			        il pun rezultatul intr-o lista calculated_distances 
			4.1.3)Merg prin lista si verifi ca fiecare remain_time>0
				in caz contrar nu o sa-l pot lua pe noul pacient
	4.2)Daca flagurile de la 4.1) sunt ok asignez noul pacient masinii gasite la 4.1)
	De adaugat alte minusuri




!!!!Timpurile din Activity au fost calculate in secunde 
	Eu am folosit functii din time_calculator.py pentru a lucra pe timp sub format de string. Mie mai usor sa observ chestii in neregula
#Ce as mai avea de facut in continuare
	Momoentam lista de activitati nu este unitara( trebuie si back si froward sa fie toate intr-o aceeasi lista)
	Clasa monitor sa ai o lista in care sa marcam activitaitle forward terimante si o lista pentru cele backward///liste de clasa
	Inca nu m-am gandit cum sa manageriez activitatile Backward daca cele froward nu au fost realizate: F1 trebuie sa se realizeze inainte sa fac ceva cu  B1
	Sa fac managerierea cand masina nu mai accepta pacienti
	De facut managerierea in caz ca verificare de la remain_time da 0
	
Rezultatul Din ce am vazut rezultatul programului e: cate activitati au fost satisfacute
		Deci daca face acele liste in clasa Monitor la final putem cauta perechile FB:(F1,B1),(F2,B2) si numara	
	
	